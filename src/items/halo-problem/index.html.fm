---
title: The Halo Problem
tags: [math, programming]
date: 2019-11-23
desc: "A strange problem I had when coding"
layout: post
requires: [mathjax, notes, syntax-highlighting]
---

<p>I'd like to share with you an interesting problem I ran across when working a project for my graphics class.</p>

<p><note-ref to="skipping">Skipping much of the course,</note-ref> we'll start the tale when I implemented intersection of two objects in 3d space:</p>

<note-def id="skipping">
  <p>In the class, we've been coding simple object rendering. We started with 2D, drawing simple colored polygons:</p>

  <div class="figure">
    <img class="--small" src="pics/2d-unclipped.png" />
    <p class="caption">A colored polygon</p>
  </div>

  <p>and then we allowed the user to clip said polygons:</p>

  <div class="figure">
    <img class="--small" src="pics/2d-clipped.png" />
    <p class="caption">A clipped polygon</p>
  </div>

  <p>And then we moved onto 3D! This started out with rendering simple wireframes, for instance of this torus:</p>

  <div class="figure">
    <img class="--small" src="pics/3d-wireframe.png" />
    <p class="caption">A torus displayed as a 3d wireframe</p>
  </div>

  <p>We then implemented an improvement called "backface elimination" which improves rendering of some shapes, including this torus ...</p>

  <div class="figure">
    <img class="--small" src="pics/3d-backface.png" />
    <p class="caption">Backface elimination removes the 'back' of the torus</p>
  </div>

  <p>... but only from certain angles ...</p>

  <div class="figure">
    <img class="--small" src="pics/3d-backface-turned.png" />
    <p class="caption">Backface elimination does not work perfectly on a torus</p>
  </div>

  <p>Then we actually filled in the polygons instead of just painting their wireframes:</p>

  <div class="figure">
    <img class="--small" src="pics/3d-painted.png" />
    <p class="caption">A painted torus</p>
  </div>

  <p><note-ref to="multiple-timing">And allowed multiple objects at once:</note-ref></p>

  <note-def id="multiple-timing">
    <p>Actually, I'm not sure where exactly this came in the timeline. It's not important.</p>
  </note-def>

  <div class="figure">
    <img class="--small" src="pics/3d-painted-multiple.png" />
    <p class="caption">A painted torus next to a painted sphere</p>
  </div>

  <p>Then we added lighting!</p>

  <div class="figure">
    <img class="--small" src="pics/3d-lit.png" />
    <img class="--small" src="pics/3d-lit-multiple.png" />
    <p class="caption">A torus next to a sphere, both lit</p>
  </div>

  <p><note-ref to="intersecting-timing">Most recently, we accounted for objects intersecting, which I will discuss after this footnote...</note-ref></p>

  <note-def id="intersecting-timing">
    <p>This is actually a slight lie: I accounted for intersections <em>before</em> doing lighting. But this order works better for the blog post.</p>
  </note-def>
</note-def>

<div class="figure">
  <img class="--small" src="pics/3d-correct_intersection.png" />
  <p class="caption">A torus and sphere intersecting</p>
</div>

<p>The problem of how to allow for intersections like this is actually a bit subtle.</p>

<p>See, the naive rendering implementation is just to render objects back-to-front. Take a list of objects, sort it by distance to observer, and draw the objects, farthest-to-closest. In order to do the sort, we would call <code>qsort</code> with a <code>comparator</code> function which compares two object and tells <code>qsort</code> which one should come before the other in the list.</p>

<p>This <code>comparator</code> would look <note-ref to="something-like-this">something like this</note-ref>:</p>

<note-def id="something-like-this">
  <p>... except written in C, not pseudo-JS.</p>
</note-def>

<pre><code class="javascript">function comparator(object1, object2) {
  // Order by distance
  let distance1 = distance_to_observer(object1);
  let distance2 = distance_to_observer(object2);
  if (distance1 > distance2) return PAINT_OBJECT1_FIRST;
  if (distance2 > distance1) return PAINT_OBJECT2_FIRST;
  return PAINT_EITHER_FIRST;
}
</code></pre>

<p>However, this cannot render any intersections, since each objects is rendered wholesale, one-at-a-time.</p>

<p>Instead, a better approach is to decompose all objects into their constituent polygons, collect them all in an aggregate list, sort <em>this</em> by distance to observer, and paint each <em>polygon</em> one-at-a-time. So that's what I did. The comparator looked the same as the previous one, but as a function of polygons instead of objects:</p>

<pre><code class="javascript">function comparator(poly1, poly2) {
  // Order by distance
  let distance1 = distance_to_observer(poly1);
  let distance2 = distance_to_observer(poly2);
  if (distance1 > distance2) return PAINT_POLY1_FIRST;
  if (distance2 > distance1) return PAINT_POLY2_FIRST;
  return PAINT_EITHER_FIRST;
}
</code></pre>

<p>And it worked great! (As is evident by the existence of the photo in which clipping is working correctly)</p>

<p>Now is where things start getting funky. See, the user was able to manipulate one object at a time with the keyboard. I visually cued which object was selected by changing the color of its wireframe:</p>

<div class="figure">
  <img class="--small" src="pics/3d-wireframe-selection-1.png" />
  <img class="--small" src="pics/3d-wireframe-selection-2.png" />
  <p class="caption">Selection was cued by a change of wireframe color</p>
</div>

<p>but I wasn't happy with this (for a few reasons). Instead, I wanted to do something cooler: I wanted to draw a halo around whichever object was selected:</p>

<div class="figure">
  <img class="--small" src="pics/3d-correct_halo-1.png" />
  <img class="--small" src="pics/3d-correct_halo-2.png" />
  <p class="caption">Cuing selection with a halo instead</p>
</div>

<p>Looking at the above images, you may think I succeeded in doing so. And I did! Kind of. With those specific objects in those specific positions with those specific angles, the halos render correctly. In general, however, they don't. As it turns out, the problem of how to render these halos is quite tricky...</p>

<p>So how did I render the halos?</p>

<p>The pieces of the algorithm relevant to halo rendernig are creating and sorting the list of polygons. Firstly, besides adding each polygon into an aggregate list like we were before, we also add extra polygons: <note-ref to="select-option">each polygon of the selected object gets duplicated, dilated, turned red, and added to the list as well</note-ref>. Then we draw the red polygons behind their purple counterparts, giving a kind of "glow" around the whole object.</p>

<note-def id="select-option">
  <p>Another option is to dilate the object as a whole around its center; however, this has some issues. It would work perfectly on a sphere but wouldn't work as well on a torus: the inside of the torus would get no halo.</p>
</note-def>

<p>The question, then, is how <em>exactly</em> to sort the list of polygons. We want red behind purple, of course, but code demands we be more precise.</p>

<p><note-ref to="most-direct">The most direct answer</note-ref> is to draw each special red polygon directly before its regular, purple counterpart. This corresponds to the following comparator function:</p>

<note-def id="most-direct">
  <p>Another option is to paint all red polygons before all purple polygons, and otherwise paint by distance:</p>
  <pre><code class="javascript">function comparator(poly1, poly2) {
  // Place red before purple
  if (is_red(poly1) && !is_red(poly2)) return PAINT_POLY1_FIRST;
  if (is_red(poly2) && !is_red(poly1)) return PAINT_POLY2_FIRST;

  // Otherwise, order by distance
  let distance1 = distance_to_observer(poly1);
  let distance2 = distance_to_observer(poly2);
  if (distance1 > distance2) return PAINT_POLY1_FIRST;
  if (distance2 > distance1) return PAINT_POLY2_FIRST;

  return PAINT_EITHER_FIRST;
}
</code></pre>
  <p>The issue with this is that it means that the halo is <em>never</em> painted on top of anything else. However, it is sometimes appropriate to paint the halo on top of other things. For instance, if a selected torus is entirely in front of a sphere, it would make sense for the halo to be painted on top of the sphere.</p>
</note-def>

<pre><code class="javascript">function comparator(poly1, poly2) {
  // Order by distance
  let distance1 = distance_to_observer(poly1);
  let distance2 = distance_to_observer(poly2);
  if (distance1 > distance2) return PAINT_POLY1_FIRST;
  if (distance2 > distance1) return PAINT_POLY2_FIRST;

  // If the same distance, for instance in the case of a pair
  // of buddy red and purple polygons, paint the red polygon first
  if (is_red(poly1) && !is_red(poly2)) return PAINT_POLY1_FIRST;
  if (is_red(poly2) && !is_red(poly1)) return PAINT_POLY2_FIRST;

  return PAINT_EITHER_FIRST;
}
</code></pre>

<p>...unfortunately, this doesn't work so well:</p>

<div class="figure">
  <img class="--small" src="pics/3d-naive_comparator.png" />
  <p class="caption">The naive comparator algorithm does not work well</p>
</div>

<p>The issue is that since each red polygon is enlarged, it obscures all the purple polygons behind it. Thus, the only purple polygon you're able to see is the one in the very front.</p>

<p>Okay, let's try again. In order to avoid the previous problem, we'll place each red polygon behind <em>all</em> polygons from the focused model. Otherwise, we'll paint in order of decreasing distance, just as before:</p>

<pre><code class="javascript">function comparator(poly1, poly2) {
  // If both polygons are from the focused model
  /// (they can be either red or purple)
  if (is_in_focused_polygon(poly1) && is_in_focused_polygon(poly2)) {
    // Paint red polygons first
    if (is_red(poly1) && !is_red(poly2)) return PAINT_POLY1_FIRST;
    if (is_red(poly2) && !is_red(poly1)) return PAINT_POLY2_FIRST;
  }

  // Otherwise, order by distance
  let distance1 = distance_to_observer(poly1);
  let distance2 = distance_to_observer(poly2);
  if (distance1 > distance2) return PAINT_POLY1_FIRST;
  if (distance2 > distance1) return PAINT_POLY2_FIRST;

  return PAINT_EITHER_FIRST;
}
</code></pre>

<p>Deviously, this one <note-ref to="in-fact">it appears to work at first</note-ref>. However, weird stuff starts to happen.</p>

<note-def id="in-fact">
  <p>In fact, it's the comparator function I used to generate the original "correct" halo images.</p>
</note-def>

<p>For instance, sometimes polygons render out-of-order or don't render at all, causing glitchy holes and red blotches on the torus:</p>

<div class="figure">
  <img class="--small" src="pics/3d-weird_rendering-1.png" />
  <img class="--small" src="pics/3d-weird_rendering-2.png" />
  <img class="--small" src="pics/3d-weird_rendering-3.png" />
  <img class="--small" src="pics/3d-weird_rendering-4.png" />
  <p class="caption">With this comparator, some polygons are rendered out of order or not at all</p>
</div>

<p>Even weirder, I found a setup with a torus and a sphere in which the torus would render differently based on how the sphere was rotated:</p>

<div class="figure">
  <img class="--small" src="pics/3d-incorrect_intersection-weird-1.png" />
  <img class="--small" src="pics/3d-incorrect_intersection-weird-2.png" />
  <img class="--small" src="pics/3d-incorrect_intersection-weird-3.png" />
  <p class="caption">As the sphere is rotated, polygons on the top of the torus begin to render incorrectly</p>
</div>

<p>So what the hell is going on?</p>

<p>Consider more weird behavior in which the apparent overlapping of two objects will depend on which object is selected:</p>

<div class="figure">
  <img class="--small" src="pics/3d-incorrect_intersection-overlapping-1.png" />
  <img class="--small" src="pics/3d-incorrect_intersection-overlapping-2.png" />
  <img class="--small" src="pics/3d-incorrect_intersection-overlapping-3.png" />
  <p class="caption">The object that appears 'on top' depends on which object is selected (either way, the halo appears 'behind')</p>
</div>

<p>In actuality, the sphere is clipping into the torus (as can be seen by the first image, where nothing is selected). However, I claim that the way <code>comparator</code> is defined, I can prove that when the torus is selected, the leftmost polygon of the torus should be painted on top of the closest polygon of the sphere, despite it being further</p>

<p>Why is this so? The proof goes something like this:</p>
<ol>
  <li>Assume the torus is selected.</li>
  <li>Note that <code>comparator</code> tells us to paint the rightmost red torus polygon before we paint the leftmost purple torus polygon&mdash;because they are in the same object, <code>comparator</code> paints the red polygon before the purple polygon.</li>
  <li>Now note that <code>comparator</code> tells us to paint the closest sphere polygon before we paint the rightmost red torus polygon&mdash;since they are from different objects, <code>comparator</code> compares their distances, and the sphere polygon is further than the torus polygon.</li>
  <li>Thus, <code>comparator</code> has told us that (1) the sphere polygon should be painted before the red torus polygon, and (2) the red torus polygon should be painted before the purple torus polygon. We conclude, then, that the sphere polygon should be painted before the purple torus polygon.</li>
</ol>

<p>In this manner, we can show that, according to <code>comparator</code>, if the torus is selected, then the leftmost purple torus polygon <em>is</em>, visually, in front of the sphere. We can repeat a similar proof for <em>all</em> the polygons on the left side of the torus, and thus show that, visually, the torus is entirely in front of the sphere.</p>

<p>Likewise, when the sphere is selected, we are able to do similar proofs for its polygons, showing that the sphere is visually on top of the torus.</p>

<p>I conjecture that <note-ref to="proofs">these kinds of proofs are what <code>qsort</code> is doing</note-ref>, causing this strange behavior.</p>

<note-def id="proofs">
  <p>Note we can also prove that the sphere polygon should be painted before the purple polygon, since they are from different polygons and the sphere polygon is further than the purple polygon. Thus, the sphere polygon should be painted before the torus polygon, but also, as we have already shown, the torus polygon should be painted before the sphere polygon. Impossible!</p>
  <p>I think (but have not proven) that you can (constructively, without use of LEM) prove, for any two polygons $a$ and $b$, that $a$ should be painted before $b$.</p>
</note-def>

<p>The issue is that we're treating <code>comparator</code> as something it isn't. In particular, in our proof we assume the transitivity of <code>comparator</code>&mdash;that if it places $a$ before $b$ in the paint order, and placed $b$ before $c$, then it will also place $a$ before $c$. But this simply isn't true! (as shown by the fact that using transitivity leads to contradictions)</p>

<p>This corresponds to the <note-ref to="fact">fact</note-ref> that <code>qsort</code> expects <code>comparator</code> to represent a total ordering&mdash;i.e., be sufficiently nice and sufficiently self-consistent in certain ways, such as transitivity&mdash;but the <code>comparator</code> we wrote does not represent a total ordering.</p>

<note-def id="fact">
  <p>I actually haven't verified this, but I can't imagine that it isn't true.</p>
</note-def>

<p>So how did I fix <code>comparator</code>? Well, I didn't! I'm still not sure about a good solution to this issue. If you have any ideas, let me know! I hope you thought this was as interesting as I did!</p>
